import { app } from "./app.js";
import {v2 as cloudinary} from "cloudinary";
import { startBlockchainSync } from './services/blockchainSyncService.js';
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configure dotenv before using any environment variables
dotenv.config({ path: path.join(__dirname, './config/config.env') });

// Verify required environment variables
const requiredEnvVars = [
    'PORT',
    'CLOUDINARY_CLIENT_NAME',
    'CLOUDINARY_CLIENT_API',
    'CLOUDINARY_CLIENT_SECRET'
];

const missingEnvVars = requiredEnvVars.filter(varName => !process.env[varName]);
if (missingEnvVars.length > 0) {
    console.error('❌ Missing required environment variables:', missingEnvVars.join(', '));
    process.exit(1);
}

try {
    cloudinary.config({
        cloud_name: process.env.CLOUDINARY_CLIENT_NAME,
        api_key: process.env.CLOUDINARY_CLIENT_API,
        api_secret: process.env.CLOUDINARY_CLIENT_SECRET,
    });
    console.log('✅ Cloudinary configured successfully');
} catch (error) {
    console.error('❌ Cloudinary configuration error:', error);
    process.exit(1);
}

// Start blockchain sync service with error handling
try {
    startBlockchainSync();
    console.log('✅ Blockchain sync service started');
} catch (error) {
    console.error('❌ Failed to start blockchain sync:', error);
    // Don't exit here as this is not critical for the server
}

const PORT = process.env.PORT || 4000;

app.listen(PORT, () => {
    console.log('\x1b[32m%s\x1b[0m', `🚀 Server is running on port ${PORT}`);
});